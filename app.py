import os
from flask import Flask,jsonify
from flask_smorest import Api
from db import db 
from flask_jwt_extended import JWTManager
from flask_migrate import Migrate

from models.tabledb import itemModel,storeModel,tagModel,itemTagsModel,userModel

from resources.store import blueprint as storeblueprint  #to diffrentiate in case of multiple blueprints
from resources.item import blueprint as itemblueprint
from resources.tag import blueprint as tagblueprint
from resources.user import blueprint as userblueprint

#With the app factory pattern, we write a function that returns app. That way we can pass configuration values
#  to the function, so that we configure the app before getting it back.
#This is especially useful for testing, but also if you want to do things like have staging and production apps.
#To do the app factory, all we do is place all the app-creation code inside a function which must be called create_app()

db_url = None
def create_app(db_url = None):  #db_url lets us create an app with a certain database URL, or alternatively try to fetch the database URL from the environment variables. The default value will be a local SQLite file, if we don't pass a value ourselves and it isn't in the environment.
    app = Flask(__name__)
    app.config["PROPAGATE_EXCEPTIONS"] = True
    app.config["API_TITLE"] = "Stores REST API"
    app.config["API_VERSION"] = "v1"
    app.config["OPENAPI_VERSION"] = "3.0.3"
    app.config["OPENAPI_URL_PREFIX"] = "/"
    app.config["OPENAPI_SWAGGER_UI_PATH"] = "/swagger-ui"
    app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/"

    app.config["SQLALCHEMY_DATABASE_URI"] = db_url or os.getenv("DATABASE_URL", "sqlite:///data.sqlite")

    db.init_app(app) #connect flask app to sqlalchemy

    migrate = Migrate(app,db)

    api = Api(app) #api rapper to connect to resource

    app.config["JWT_SECRET_KEY"] = "12ywjhadbhjbasdhdajshjbx" # used for signing the JWT & will be generated by str(secrets.SystemRandom().getrandbits(128))
    jwt = JWTManager(app)
    
    #error handeling function for JWT
    @jwt.expired_token_loader
    def expired_token_callback(jwt_header, jwt_payload):
        return (
            jsonify({"message": "The token has expired.", "error": "token_expired"}),
            401,
        )

    @jwt.invalid_token_loader
    def invalid_token_callback(error):
        return (
            jsonify(
                {"message": "Signature verification failed.", "error": "invalid_token"}
            ),
            401,
        )

    @jwt.unauthorized_loader
    def missing_token_callback(error):
        return (
            jsonify(
                {
                    "description": "Request does not contain an access token.",
                    "error": "authorization_required",
                }
            ),
            401,
        )

    #optional function if we want to add extra information with jwt 
    @jwt.additional_claims_loader
    def add_claims_to_jwt(identity):
        if identity == 1:  #Normally you'd read this from either a config file or the database.
            return {"is_admin": True}
        return {"is_admin": False}


    #If you are using Flask-Migrate to create our database,no need to use Flask-SQLAlchemy to create db
    # we can delete these lines while using flask migrate
    # with app.app_context():  
    #     db.create_all()   #will create db if it doesnt exist
        

    api.register_blueprint(itemblueprint)
    api.register_blueprint(storeblueprint)
    api.register_blueprint(tagblueprint)
    api.register_blueprint(userblueprint)

    return app 



